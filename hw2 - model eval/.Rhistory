x = "Distance",
y = "Log score",
color = "Fold"  # Legend title
) +
theme_minimal() +  # Minimal theme
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),  # Center and style the title
axis.title = element_text(size = 12),  # Increase axis title size
axis.text = element_text(size = 10),  # Increase axis tick label size
legend.position = "bottom"  # Move legend to the bottom
)
print(p)
# Plot all pairs on one graph
p <- ggplot(plot_data, aes(x = distance, y = logscore, color = Pair)) +
geom_point(size = 2, alpha = 0.5) +  # Set point size and transparency
geom_smooth(
aes(x = distance, y = logscore, group = 1),  # Smooth across all points
method = "loess",  # Use LOESS smoothing
se = FALSE,  # Don't show confidence interval
color = "black",  # Color of the smoothed line
size = 2,  # Thickness of the line
linetype = "full"  # Line type (e.g., dashed)
) +
labs(
title = "",
x = "Distance",
y = "Log score",
color = "Fold"  # Legend title
) +
theme_minimal() +  # Minimal theme
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),  # Center and style the title
axis.title = element_text(size = 12),  # Increase axis title size
axis.text = element_text(size = 10),  # Increase axis tick label size
legend.position = "bottom"  # Move legend to the bottom
)
print(p)
# Plot all pairs on one graph
p <- ggplot(plot_data, aes(x = distance, y = logscore, color = Pair)) +
geom_point(size = 2, alpha = 0.5) +  # Set point size and transparency
geom_smooth(
aes(x = distance, y = logscore, group = 1),  # Smooth across all points
method = "loess",  # Use LOESS smoothing
se = FALSE,  # Don't show confidence interval
color = "black",  # Color of the smoothed line
size = 2,  # Thickness of the line
linetype = "solid"  # Line type (e.g., dashed)
) +
labs(
title = "",
x = "Distance",
y = "Log score",
color = "Fold"  # Legend title
) +
theme_minimal() +  # Minimal theme
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),  # Center and style the title
axis.title = element_text(size = 12),  # Increase axis title size
axis.text = element_text(size = 10),  # Increase axis tick label size
legend.position = "bottom"  # Move legend to the bottom
)
print(p)
plot_data
set.seed(42)
n_boot <- 1000
boot_corr <- numeric(n_boot)
for (i in 1:n_boot) {
sample_indices <- sample(nrow(plot_data), replace = TRUE)
boot_sample <- plot_data[sample_indices, ]
boot_corr[i] <- cor(boot_sample$distance, boot_sample$logscore, use = "complete.obs")
}
boot_corr
# Compute 95% confidence interval
quantile(boot_corr, c(0.025, 0.975))
sd(boot_corr)
mean(boot_corr)
for (i in seq_along(pairs)) {
pair <- pairs[[i]]
logscore_col <- pair[1]
distance_col <- pair[2]
comp_col <- pair[3]
temp_data <- df %>%
select(logscore = all_of(logscore_col),
distance = all_of(distance_col),
competition = all_of(comp_col)) %>%
mutate(Pair = paste("Fold", i))  # Add a column to identify the pair
plot_data <- bind_rows(plot_data, temp_data)
}
plot_data[10:20, ]
pairs[0][3]
df
# Combine all pairs into one data frame
plot_data <- data.frame()
for (i in seq_along(pairs)) {
pair <- pairs[[i]]
logscore_col <- pair[1]
distance_col <- pair[2]
temp_data <- df %>%
select(logscore = all_of(logscore_col), distance = all_of(distance_col)) %>%
mutate(Pair = paste("Fold", i))  # Add a column to identify the pair
plot_data <- bind_rows(plot_data, temp_data)
}
plot_data[10:20, ]
plot_data <- data.frame()
for (i in seq_along(pairs)) {
pair <- pairs[[i]]
logscore_col <- pair[1]
distance_col <- pair[2]
comp_col <- pair[3]
temp_data <- df %>%
select(logscore = all_of(logscore_col),
distance = all_of(distance_col),
competition = all_of(comp_col)) %>%
mutate(Pair = paste("Fold", i))  # Add a column to identify the pair
plot_data <- bind_rows(plot_data, temp_data)
}
plot_data[10:20, ]
df_all <- plot_data
for (i in 1:n_boot) {
# Bootstrap sample with replacement
boot_sample <- df_all[sample(nrow(df), replace = TRUE), ]
# Compute mean log score for each competition type
logscore_means <- boot_sample %>%
group_by(Competition) %>%
summarize(mean_logscore = mean(log_loss, na.rm = TRUE))
# Merge with true frequencies
logscore_means <- logscore_means %>%
mutate(weight = true_freqs[as.character(Competition)]) %>%
drop_na(weight)  # Drop any missing weights
# Compute weighted log score
boot_log_scores[i] <- sum(logscore_means$mean_logscore * logscore_means$weight, na.rm = TRUE)
}
df_all <- plot_data
for (i in 1:n_boot) {
# Bootstrap sample with replacement
boot_sample <- df_all[sample(nrow(df), replace = TRUE), ]
# Compute mean log score for each competition type
logscore_means <- boot_sample %>%
group_by(competition) %>%
summarize(mean_logscore = mean(log_loss, na.rm = TRUE))
# Merge with true frequencies
logscore_means <- logscore_means %>%
mutate(weight = true_freqs[as.character(competition)]) %>%
drop_na(weight)  # Drop any missing weights
# Compute weighted log score
boot_log_scores[i] <- sum(logscore_means$mean_logscore * logscore_means$weight, na.rm = TRUE)
}
df_all <- plot_data
for (i in 1:n_boot) {
# Bootstrap sample with replacement
boot_sample <- df_all[sample(nrow(df), replace = TRUE), ]
# Compute mean log score for each competition type
logscore_means <- boot_sample %>%
group_by(competition) %>%
summarize(mean_logscore = mean(logscore, na.rm = TRUE))
# Merge with true frequencies
logscore_means <- logscore_means %>%
mutate(weight = true_freqs[as.character(competition)]) %>%
drop_na(weight)  # Drop any missing weights
# Compute weighted log score
boot_log_scores[i] <- sum(logscore_means$mean_logscore * logscore_means$weight, na.rm = TRUE)
}
# install.packages("ggplot2")
install.packages("tidyverse")  # OR install.packages("tidyr")
# Load the required package
library(tidyr)
for (i in 1:n_boot) {
# Bootstrap sample with replacement
boot_sample <- df_all[sample(nrow(df), replace = TRUE), ]
# Compute mean log score for each competition type
logscore_means <- boot_sample %>%
group_by(competition) %>%
summarize(mean_logscore = mean(logscore, na.rm = TRUE))
# Merge with true frequencies
logscore_means <- logscore_means %>%
mutate(weight = true_freqs[as.character(competition)]) %>%
drop_na(weight)  # Drop any missing weights
# Compute weighted log score
boot_log_scores[i] <- sum(logscore_means$mean_logscore * logscore_means$weight, na.rm = TRUE)
}
set.seed(42)  # For reproducibility
n_boot <- 1000  # Number of bootstrap samples
boot_log_scores <- numeric(n_boot)
# Define true competition frequencies
true_freqs <- c("EURO" = 0.1, "NBA" = 0.6, "SLO1" = 0.1, "U14" = 0.1, "U16" = 0.1)
df_all <- plot_data
for (i in 1:n_boot) {
# Bootstrap sample with replacement
boot_sample <- df_all[sample(nrow(df), replace = TRUE), ]
# Compute mean log score for each competition type
logscore_means <- boot_sample %>%
group_by(competition) %>%
summarize(mean_logscore = mean(logscore, na.rm = TRUE))
# Merge with true frequencies
logscore_means <- logscore_means %>%
mutate(weight = true_freqs[as.character(competition)]) %>%
drop_na(weight)  # Drop any missing weights
# Compute weighted log score
boot_log_scores[i] <- sum(logscore_means$mean_logscore * logscore_means$weight, na.rm = TRUE)
}
# Compute 95% confidence interval
log_score_CI <- quantile(boot_log_scores, c(0.025, 0.975))
# Report results
cat("Estimated Weighted Log Score:", mean(boot_log_scores), "\n")
cat("95% Confidence Interval:", log_score_CI, "\n")
# Define true competition frequencies
true_freqs <- c("EURO" = 0.1, "NBA" = 0.6, "SLO1" = 0.1, "U14" = 0.1, "U16" = 0.1)
df_all <- plot_data
boot_log_scores <- numeric(n_boot)
for (i in 1:n_boot) {
# Bootstrap sample with replacement
boot_sample <- df_all[sample(nrow(df_all), replace = TRUE), ]
# Compute mean log score for each competition type
logscore_means <- boot_sample %>%
group_by(competition) %>%
summarize(mean_logscore = mean(logscore, na.rm = TRUE))
# Merge with true frequencies
logscore_means <- logscore_means %>%
mutate(weight = true_freqs[as.character(competition)]) %>%
drop_na(weight)  # Drop any missing weights
# Compute weighted log score
boot_log_scores[i] <- sum(logscore_means$mean_logscore * logscore_means$weight, na.rm = TRUE)
}
# Compute 95% confidence interval
log_score_CI <- quantile(boot_log_scores, c(0.025, 0.975))
# Report results
cat("Estimated Weighted Log Score:", mean(boot_log_scores), "\n")
cat("95% Confidence Interval:", log_score_CI, "\n")
# Define true competition frequencies
true_freqs <- c("EURO" = 0.1, "NBA" = 0.6, "SLO1" = 0.1, "U14" = 0.1, "U16" = 0.1)
df_all <- plot_data
boot_log_scores <- numeric(n_boot)
for (i in 1:n_boot) {
# Bootstrap sample with replacement
boot_sample <- df_all[sample(nrow(df_all), replace = TRUE), ]
# Compute mean log score for each competition type
logscore_means <- boot_sample %>%
group_by(competition) %>%
summarize(mean_logscore = mean(logscore, na.rm = TRUE))
# Merge with true frequencies
logscore_means <- logscore_means %>%
% mutate(weight = true_freqs[as.character(competition)]) %>%
boot_log_scores <- numeric(n_boot)
for (i in 1:n_boot) {
# Bootstrap sample with replacement
boot_sample <- df_all[sample(nrow(df_all), replace = TRUE), ]
# Compute mean log score for each competition type
logscore_means <- boot_sample %>%
group_by(competition) %>%
summarize(mean_logscore = mean(logscore, na.rm = TRUE))
# Merge with true frequencies
logscore_means <- logscore_means %>%
# mutate(weight = true_freqs[as.character(competition)]) %>%
drop_na(weight)  # Drop any missing weights
# Compute weighted log score
boot_log_scores[i] <- sum(logscore_means$mean_logscore * logscore_means$weight, na.rm = TRUE)
}
true_freqs <- c("EURO" = 0.1, "NBA" = 0.6, "SLO1" = 0.1, "U14" = 0.1, "U16" = 0.1)
df_all <- plot_data
boot_log_scores <- numeric(n_boot)
for (i in 1:n_boot) {
# Bootstrap sample with replacement
boot_sample <- df_all[sample(nrow(df_all), replace = TRUE), ]
# Compute mean log score for each competition type
logscore_means <- boot_sample %>%
group_by(competition) %>%
summarize(mean_logscore = mean(logscore, na.rm = TRUE))
# Merge with true frequencies
logscore_means <- logscore_means# %>%
# mutate(weight = true_freqs[as.character(competition)]) %>%
#drop_na(weight)  # Drop any missing weights
# Compute weighted log score
boot_log_scores[i] <- sum(logscore_means$mean_logscore * logscore_means$weight, na.rm = TRUE)
}
# Define true competition frequencies
true_freqs <- c("EURO" = 0.1, "NBA" = 0.6, "SLO1" = 0.1, "U14" = 0.1, "U16" = 0.1)
df_all <- plot_data
boot_log_scores <- numeric(n_boot)
for (i in 1:n_boot) {
# Bootstrap sample with replacement
boot_sample <- df_all[sample(nrow(df_all), replace = TRUE), ]
# Compute mean log score for each competition type
logscore_means <- boot_sample %>%
group_by(competition) %>%
summarize(mean_logscore = mean(logscore, na.rm = TRUE))
# Merge with true frequencies
logscore_means <- logscore_means %>%
mutate(weight = true_freqs[as.character(competition)]) %>%
drop_na(weight)  # Drop any missing weights
# Compute weighted log score
boot_log_scores[i] <- sum(logscore_means$mean_logscore * logscore_means$weight, na.rm = TRUE)
}
# Compute 95% confidence interval
log_score_CI <- quantile(boot_log_scores, c(0.025, 0.975))
# Report results
cat("Estimated Weighted Log Score:", mean(boot_log_scores), "\n")
cat("95% Confidence Interval:", log_score_CI, "\n")
for (i in 1:n_boot) {
# Resample with replacement
boot_sample <- df[sample(nrow(df), replace = TRUE), ]
# Compute unweighted log loss (simple mean)
boot_unweighted[i] <- mean(boot_sample$log_loss, na.rm = TRUE)
# Compute weighted log loss based on true competition frequencies
weighted_sum <- 0
for (comp in names(true_freqs)) {
comp_log_loss <- mean(boot_sample$log_loss[boot_sample$Competition == comp], na.rm = TRUE)
weighted_sum <- weighted_sum + (comp_log_loss * true_freqs[comp])
}
boot_weighted[i] <- weighted_sum
}
boot_unweighted <- numeric(n_boot)
boot_weighted <- numeric(n_boot)
for (i in 1:n_boot) {
# Resample with replacement
boot_sample <- df[sample(nrow(df), replace = TRUE), ]
# Compute unweighted log loss (simple mean)
boot_unweighted[i] <- mean(boot_sample$log_loss, na.rm = TRUE)
# Compute weighted log loss based on true competition frequencies
weighted_sum <- 0
for (comp in names(true_freqs)) {
comp_log_loss <- mean(boot_sample$log_loss[boot_sample$Competition == comp], na.rm = TRUE)
weighted_sum <- weighted_sum + (comp_log_loss * true_freqs[comp])
}
boot_weighted[i] <- weighted_sum
}
# Compute confidence intervals
ci_unweighted <- quantile(boot_unweighted, c(0.025, 0.975))
ci_unweighted <- quantile(boot_unweighted, c(0.025, 0.975), na.rm=TRUE)
ci_weighted <- quantile(boot_weighted, c(0.025, 0.975), na.rm=TRUE)
# Print results
cat("95% CI for Unweighted Log Score:", ci_unweighted, "\n")
cat("95% CI for Weighted Log Score:", ci_weighted, "\n")
boot_unweighted <- numeric(n_boot)
boot_weighted <- numeric(n_boot)
for (i in 1:n_boot) {
# Resample with replacement
boot_sample <- df_all[sample(nrow(df_all), replace = TRUE), ]
# Compute unweighted log loss (simple mean)
boot_unweighted[i] <- mean(boot_sample$logscore, na.rm = TRUE)
# Compute weighted log loss based on true competition frequencies
weighted_sum <- 0
for (comp in names(true_freqs)) {
comp_log_loss <- mean(boot_sample$logscore[boot_sample$competition == comp], na.rm = TRUE)
weighted_sum <- weighted_sum + (comp_log_loss * true_freqs[comp])
}
boot_weighted[i] <- weighted_sum
}
ci_unweighted <- quantile(boot_unweighted, c(0.025, 0.975), na.rm=FALSE)
ci_weighted <- quantile(boot_weighted, c(0.025, 0.975), na.rm=FALSE)
# Print results
cat("95% CI for Unweighted Log Score:", ci_unweighted, "\n")
cat("95% CI for Weighted Log Score:", ci_weighted, "\n")
cat("95% Confidence Interval:", log_score_CI, "\n")
# Define true competition frequencies as a dictionary
true_freqs <- c("EURO" = 0.1, "NBA" = 0.6, "SLO1" = 0.1, "U14" = 0.1, "U16" = 0.1)
df_all <- plot_data
boot_log_scores <- numeric(n_boot)
for (i in 1:n_boot) {
boot_sample <- df_all[sample(nrow(df_all), replace = TRUE), ]
# Compute mean log score for each competition type
logscore_means <- boot_sample %>%
group_by(competition) %>%
summarize(mean_logscore = mean(logscore, na.rm = TRUE))
# Merge with true frequencies
logscore_means <- logscore_means %>%
mutate(weight = true_freqs[as.character(competition)]) %>%
drop_na(weight)  # Drop any missing weights
boot_log_scores[i] <- sum(logscore_means$mean_logscore * logscore_means$weight, na.rm = TRUE)
}
boot_unweighted <- numeric(n_boot)
for (i in 1:n_boot) {
# Resample with replacement
boot_sample <- df_all[sample(nrow(df_all), replace = TRUE), ]
# Compute unweighted log loss (simple mean)
boot_unweighted[i] <- mean(boot_sample$logscore, na.rm = TRUE)
}
ci_unweighted <- quantile(boot_unweighted, c(0.025, 0.975), na.rm=FALSE)
ci_weighted <- quantile(boot_log_scores, c(0.025, 0.975))
cat("95% CI for Unweighted Log Score:", ci_unweighted, "\n")
cat("95% CI for Weighted Log Score:", ci_weighted, "\n")
# For each split
for (pair in pairs) {
comp_column <- pair[3]
log_column <- pair[1]
print(comp_column)
# Get empirical relative frequencies
relative_freq <- table(df[[comp_column]]) / sum(!is.na(df[[comp_column]]))
# Get mean log score for each type of competition
logscore_means <- df %>%
group_by(across(all_of(comp_column))) %>%
summarize(mean_logscore = mean(.data[[log_column]], na.rm = TRUE))
# Drop NA rows
logscore_means <- na.omit(logscore_means)
logscore_means
# Assign column names
names(logscore_means) <- c(comp_column, "mean_logscore")
# Define true DGF frequencies
true_freqs <- c(0.1, 0.6, 0.1, 0.1, 0.1)
names(true_freqs) <- comp_map
# Compute weighted log score
weighted_log_score <- sum(logscore_means$mean_logscore * true_freqs[as.character(logscore_means[[comp_column]])])
print("Weighted log score")
print(weighted_log_score)
# Compute original log score
original_log_score <- mean(df[[log_column]], na.rm = TRUE)
print("Empirical log score")
print(original_log_score)
cat("\n")
}
weighed <- numeric(5)
unweighted <- numeric(5)
i <- 0
for (pair in pairs) {
i <- i+1
comp_column <- pair[3]
log_column <- pair[1]
print(comp_column)
# Get empirical relative frequencies
relative_freq <- table(df[[comp_column]]) / sum(!is.na(df[[comp_column]]))
# Get mean log score for each type of competition
logscore_means <- df %>%
group_by(across(all_of(comp_column))) %>%
summarize(mean_logscore = mean(.data[[log_column]], na.rm = TRUE))
# Drop NA rows
logscore_means <- na.omit(logscore_means)
logscore_means
# Assign column names
names(logscore_means) <- c(comp_column, "mean_logscore")
# Define true DGF frequencies
true_freqs <- c(0.1, 0.6, 0.1, 0.1, 0.1)
names(true_freqs) <- comp_map
# Compute weighted log score
weighted_log_score <- sum(logscore_means$mean_logscore * true_freqs[as.character(logscore_means[[comp_column]])])
print("Weighted log score")
print(weighted_log_score)
# Compute original log score
original_log_score <- mean(df[[log_column]], na.rm = TRUE)
print("Empirical log score")
print(original_log_score)
cat("\n")
weighted[i] <- weighted_log_score
unweighted[i] <- original_log_score
}
weighted <- numeric(5)
unweighted <- numeric(5)
i <- 0
for (pair in pairs) {
i <- i+1
comp_column <- pair[3]
log_column <- pair[1]
print(comp_column)
# Get empirical relative frequencies
relative_freq <- table(df[[comp_column]]) / sum(!is.na(df[[comp_column]]))
# Get mean log score for each type of competition
logscore_means <- df %>%
group_by(across(all_of(comp_column))) %>%
summarize(mean_logscore = mean(.data[[log_column]], na.rm = TRUE))
# Drop NA rows
logscore_means <- na.omit(logscore_means)
logscore_means
# Assign column names
names(logscore_means) <- c(comp_column, "mean_logscore")
# Define true DGF frequencies
true_freqs <- c(0.1, 0.6, 0.1, 0.1, 0.1)
names(true_freqs) <- comp_map
# Compute weighted log score
weighted_log_score <- sum(logscore_means$mean_logscore * true_freqs[as.character(logscore_means[[comp_column]])])
print("Weighted log score")
print(weighted_log_score)
# Compute original log score
original_log_score <- mean(df[[log_column]], na.rm = TRUE)
print("Empirical log score")
print(original_log_score)
cat("\n")
weighted[i] <- weighted_log_score
unweighted[i] <- original_log_score
}
mean(weighted)
sd(weighted)
mean(unweighted)
sd(unweigted)
sd(unweighted)
cat("95% CI for Unweighted Log Score:", ci_unweighted, "\n")
cat("95% CI for Weighted Log Score:", ci_weighted, "\n")
cat("95% CI for Unweighted Log Score:", ci_unweighted, "\n")
cat("95% CI for Weighted Log Score:", ci_weighted, "\n")
true_freqs <- c("EURO" = 0.1, "NBA" = 0.6, "SLO1" = 0.1, "U14" = 0.1, "U16" = 0.1)
df_all <- plot_data
boot_log_scores <- numeric(n_boot)
for (i in 1:n_boot) {
boot_sample <- df_all[sample(nrow(df_all), replace = TRUE), ]
# Compute mean log score for each competition type
logscore_means <- boot_sample %>%
group_by(competition) %>%
summarize(mean_logscore = mean(logscore, na.rm = TRUE))
# Merge with true frequencies
logscore_means <- logscore_means %>%
mutate(weight = true_freqs[as.character(competition)]) %>%
drop_na(weight)  # Drop any missing weights
boot_log_scores[i] <- sum(logscore_means$mean_logscore * logscore_means$weight, na.rm = TRUE)
}
boot_unweighted <- numeric(n_boot)
for (i in 1:n_boot) {
# Resample with replacement
boot_sample <- df_all[sample(nrow(df_all), replace = TRUE), ]
# Compute unweighted log loss (simple mean)
boot_unweighted[i] <- mean(boot_sample$logscore, na.rm = TRUE)
}
ci_unweighted <- quantile(boot_unweighted, c(0.025, 0.975), na.rm=FALSE)
ci_weighted <- quantile(boot_log_scores, c(0.025, 0.975))
cat("95% CI for Unweighted Log Score:", ci_unweighted, "\n")
cat("95% CI for Weighted Log Score:", ci_weighted, "\n")
